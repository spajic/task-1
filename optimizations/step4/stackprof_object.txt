==================================
  Mode: object(1)
  Samples: 64222 (0.00% miss rate)
  GC: 0 (0.00%)
==================================
     TOTAL    (pct)     SAMPLES    (pct)     FRAME
     64221 (100.0%)       37842  (58.9%)     Object#work
     12438  (19.4%)       12438  (19.4%)     Object#parse_session
     22156  (34.5%)       11625  (18.1%)     Object#collect_stats_from_users
      2112   (3.3%)        2112   (3.3%)     Object#parse_user
       201   (0.3%)         201   (0.3%)     Set#add
         2   (0.0%)           2   (0.0%)     Set#each
         1   (0.0%)           1   (0.0%)     Set#initialize
     64222 (100.0%)           1   (0.0%)     block (2 levels) in <main>
     64222 (100.0%)           0   (0.0%)     block in <main>
     64222 (100.0%)           0   (0.0%)     <main>
     64222 (100.0%)           0   (0.0%)     Object#save_stdout_to_file
     64222 (100.0%)           0   (0.0%)     <main>
Object#work (/Users/donasktello/Projects/task-1/lib/parser.rb:49)
  samples:  37842 self (58.9%)  /   64221 total (100.0%)
  callers:
    64221  (  100.0%)  block (2 levels) in <main>
    38500  (   59.9%)  Object#work
    10531  (   16.4%)  Object#collect_stats_from_users
  callees (26379 total):
    38500  (  145.9%)  Object#work
    22156  (   84.0%)  Object#collect_stats_from_users
    12438  (   47.2%)  Object#parse_session
    2112  (    8.0%)  Object#parse_user
     201  (    0.8%)  Set#add
       2  (    0.0%)  Set#each
       1  (    0.0%)  Set#initialize
  code:
                                  |    49  | def work(filename)
 1652    (2.6%) /  1652   (2.6%)  |    50  |   file_lines = File.read("#{$support_dir}/#{filename}").split("\n")
                                  |    51  | 
    1    (0.0%) /     1   (0.0%)  |    52  |   users = []
    1    (0.0%) /     1   (0.0%)  |    53  |   sessions = []
                                  |    54  | 
 32656   (50.8%)                   |    55  |   file_lines.each do |line|
 12904   (20.1%) /  12904  (20.1%)  |    56  |     cols = line.split(',')
                                  |    57  | 
 1646    (2.6%) /  1646   (2.6%)  |    58  |     if cols[0] == 'user'
 2640    (4.1%) /   528   (0.8%)  |    59  |       users = users + [parse_user(line)]
                                  |    60  | 
  264    (0.4%) /   264   (0.4%)  |    61  |       sessions << []
                                  |    62  |     else
 15202   (23.7%) /  2764   (4.3%)  |    63  |       sessions[-1] = sessions[-1] + [parse_session(line)]
                                  |    64  |     end
                                  |    65  |   end
                                  |    66  | 
                                  |    67  |   # Отчёт в json
                                  |    68  |   #   - Сколько всего юзеров +
                                  |    69  |   #   - Сколько всего уникальных браузеров +
                                  |    70  |   #   - Сколько всего сессий +
                                  |    71  |   #   - Перечислить уникальные браузеры в алфавитном порядке через запятую и капсом +
                                  |    72  |   #
                                  |    73  |   #   - По каждому пользователю
                                  |    74  |   #     - сколько всего сессий +
                                  |    75  |   #     - сколько всего времени +
                                  |    76  |   #     - самая длинная сессия +
                                  |    77  |   #     - браузеры через запятую +
                                  |    78  |   #     - Хоть раз использовал IE? +
                                  |    79  |   #     - Всегда использовал только Хром? +
                                  |    80  |   #     - даты сессий в порядке убывания через запятую +
    2    (0.0%) /     2   (0.0%)  |    81  |   flatten = sessions.flatten
    1    (0.0%) /     1   (0.0%)  |    82  |   report = {}
                                  |    83  | 
                                  |    84  |   report[:totalUsers] = users.count
                                  |    85  | 
                                  |    86  |   # Подсчёт количества уникальных браузеров
    2    (0.0%) /     1   (0.0%)  |    87  |   uniqueBrowsers = Set.new
  201    (0.3%)                   |    88  |   flatten.each do |session|
                                  |    89  |     browser = session['browser']
  201    (0.3%)                   |    90  |     uniqueBrowsers << browser
                                  |    91  |   end
                                  |    92  | 
    4    (0.0%) /     2   (0.0%)  |    93  |   report['uniqueBrowsersCount'] = uniqueBrowsers.count
                                  |    94  | 
                                  |    95  |   report['totalSessions'] = flatten.count
                                  |    96  | 
                                  |    97  |   report['allBrowsers'] =
                                  |    98  |     flatten
    1    (0.0%) /     1   (0.0%)  |    99  |       .map { |s| s['browser'] }
 2765    (4.3%) /  1383   (2.2%)  |   100  |       .map { |b| b.upcase }
    2    (0.0%) /     2   (0.0%)  |   101  |       .sort
    2    (0.0%) /     2   (0.0%)  |   102  |       .uniq
    2    (0.0%) /     2   (0.0%)  |   103  |       .join(',')
                                  |   104  | 
                                  |   105  |   # Статистика по пользователям
    1    (0.0%) /     1   (0.0%)  |   106  |   users_objects = []
                                  |   107  | 
 1320    (2.1%)                   |   108  |   users.each_index do |i|
                                  |   109  |     attributes = users[i]
                                  |   110  |     user_sessions = sessions[i]
  792    (1.2%) /   792   (1.2%)  |   111  |     user_object = User.new(attributes: attributes, sessions: user_sessions)
  528    (0.8%) /   528   (0.8%)  |   112  |     users_objects = users_objects + [user_object]
                                  |   113  |   end
                                  |   114  | 
    1    (0.0%) /     1   (0.0%)  |   115  |   report['usersStats'] = {}
                                  |   116  | 
                                  |   117  |   # Собираем количество сессий по пользователям
 2379    (3.7%)                   |   118  |   collect_stats_from_users(report, users_objects) do |user|
                                  |   119  |     { 'sessionsCount' => user.sessions.count }
                                  |   120  |   end
                                  |   121  | 
                                  |   122  |   # Собираем количество времени по пользователям
 3169    (4.9%)                   |   123  |   collect_stats_from_users(report, users_objects) do |user|
 1320    (2.1%) /  1320   (2.1%)  |   124  |     { 'totalTime' => user.sessions.map {|s| s['time']}.map {|t| t.to_i}.sum.to_s + ' min.' }
                                  |   125  |   end
                                  |   126  | 
                                  |   127  |   # Выбираем самую длинную сессию пользователя
 3169    (4.9%)                   |   128  |   collect_stats_from_users(report, users_objects) do |user|
 1320    (2.1%) /  1320   (2.1%)  |   129  |     { 'longestSession' => user.sessions.map {|s| s['time']}.map {|t| t.to_i}.max.to_s + ' min.' }
                                  |   130  |   end
                                  |   131  | 
                                  |   132  |   # Браузеры пользователя через запятую
 4782    (7.4%)                   |   133  |   collect_stats_from_users(report, users_objects) do |user|
 4315    (6.7%) /  2933   (4.6%)  |   134  |     { 'browsers' => user.sessions.map {|s| s['browser']}.map {|b| b.upcase}.sort.join(', ') }
                                  |   135  |   end
                                  |   136  | 
                                  |   137  |   # Хоть раз использовал IE?
 3158    (4.9%)                   |   138  |   collect_stats_from_users(report, users_objects) do |user|
 2354    (3.7%) /  1309   (2.0%)  |   139  |     { 'usedIE' => user.sessions.map{|s| s['browser']}.any? { |b| b.upcase =~ /INTERNET EXPLORER/ } }
                                  |   140  |   end
                                  |   141  | 
                                  |   142  |   # Всегда использовал только Chrome?
 2627    (4.1%)                   |   143  |   collect_stats_from_users(report, users_objects) do |user|
 1292    (2.0%) /   778   (1.2%)  |   144  |     { 'alwaysUsedChrome' => user.sessions.map{|s| s['browser']}.all? { |b| b.upcase =~ /CHROME/ } }
                                  |   145  |   end
                                  |   146  | 
                                  |   147  |   # Даты сессий через запятую в обратном порядке в формате iso8601
 2872    (4.5%)                   |   148  |   collect_stats_from_users(report, users_objects) do |user|
 1023    (1.6%) /  1023   (1.6%)  |   149  |     { 'dates' => user.sessions.map{|s| s['date']}.sort.reverse }
                                  |   150  |   end
                                  |   151  | 
 4833    (7.5%) /  4833   (7.5%)  |   152  |   File.write("#{$support_dir}/result.json", "#{report.to_json}\n")
                                  |   153  | end
